
every 10 minutes:
	if {lottery.total} is greater than 1000:
		broadcast "&6&lLottery&7 | The lottery is being drawn in 10 seconds! &6/lotto buy&7 to join! (%{lottery.total}%&7 pot)"
		wait 10 seconds
		set {_ticketValue} to ({lottery.total} / 100)
		loop {lottery::*}:
			set {_u} to uuid of loop-value
			set {_chance::%loop-value%} to ({lottery.%{_u}%} / {_ticketValue})
		set {_s} to size of {lottery::*}
		set {_loop} to 0
		loop {lottery::*}:
			set {_u} to uuid of loop-value
			add 1 to {_loop}
			if {_w} is not set:
				if {_loop} is {_s}:
					set {_w} to loop-value
				else:
					chance of {_chance::%loop-value%}:
						set {_w} to loop-value
			delete {lottery.%{_u}%}
		broadcast "&6&lLottery&7 | &6%{_w}%&7 won the lottery! (+$%{lottery.total}%&7)"
		set {_u} to uuid of {_w}
		add {lottery.total} to {points::%{_u}%}
		delete {lottery::*}
		set {lottery.total} to 0
command /lotto [<text>] [<text>]:
	trigger:
		if arg-1 is "add":
			if arg-2 is not set:
				send "&cPlease select a point value to add to the lottery"
			else:
				set {_n} to arg-2 parsed as an integer
				if {_n} is not an integer:
					send "&cInvalid integer!"
				else:
					if {_n} is less than 50:
						send "&cPlease select a value greater than 50!"
					else:
						if {points::%player's uuid%} is less than {_n}:
							send "&cYou dont have enough points!"
						else:
							if {lottery::*} does not contain player:
								add player to {lottery::*}
							add {_n} to {lottery.%player's uuid%}
							add {_n} to {lottery.total}
							broadcast "&6&lLottery&7 | &6%player%&7 added &6%{_n}%&7 points to the lottery! ($%{lottery.total}%&7)"
		else if arg-1 is "list":
			send "&6&lLottery&7 | The total lottery pool is &6$%({lottery.total} ? 0)%&7! You have contributed &6$%({lottery.%player's uuid%} ? 0)%&7!"
		else:
			send "&3---------------&6&lLottery&3---------------"
			send "&7●&6 /lotto add (number)&7 - Adds to the lotto pool"
			send "&7●&6 /lotto list&7 - Sends lotto data"
			send "&7●&6 /lotto help&7 - Sends this help menu"
			send "&3---------------&6&lLottery&3---------------"
on npc right click:
	if citizen is named "&6&lGamble":
		make player execute command "/gamble"
		cancel event
command /gamble:
	trigger:
		open virtual chest inventory named "&6Gamble" with size 3 to player
		loop 10 times:
			format gui slot (loop-value - 1) of player with gray stained glass pane named "&7" to do nothing
		format gui slot 10 of player with sunflower named "&6Coinflip" with lore "&7Double your money!" and "&7(Click to gamble)" to run:
			close player's inventory
			send "&c/coinflip <heads/tails> <amount>"
		format gui slot 11 of player with paper named "&6Lottery" with lore "&7Join the pool!" and "&7(Click to gamble)" to run:
			close player's inventory
			send "&3---------------&6&lLottery&3---------------"
			send "&7●&6 /lotto add (number)&7 - Adds to the lotto pool"
			send "&7●&6 /lotto list&7 - Sends lotto data"
			send "&7●&6 /lotto help&7 - Sends this help menu"
			send "&3---------------&6&lLottery&3---------------"
		format gui slot 12 of player with emerald named "&6What are the odds?" with lore "&7Quadruple your money!" and "&7(Click to gamble)" to run:
			close player's inventory
			send "&c/odds <number 1-10> <amount>"
command /coinflip [<text>] [<text>]:
	trigger:
		if arg-1 is not set:
			send "&cPlease select ""heads"" or ""tails"""
		else:
			if arg-1 is not "heads" or "tails":
				send "&cPlease select ""heads"" or ""tails"""
			else:
				if arg-2 is not set:
					send "&cPlease select an amount!"
				else:
					set {_a} to arg-2 parsed as an integer
					if {_a} is not an integer:
						send "&cInvalid integer!"
					else:
						if {_a} is less than 50:
							send "&cPlease select an amount over 50!"
						else:
							coinflip(player, {_a}, arg-1)
command /odds [<text>] [<text>]:
	trigger:
		if arg-1 is not set:
			send "&cPlease select a number 1-10"
		else:
			set {_o} to arg-1 parsed as an integer
			if {_o} is not an integer:
				send "&cInvalid integer!"
			else:
				if {_o} is not between 1 and 10:
					send "&cPlease select a number 1-10"
				else:
					if arg-2 is not set:
						send "&cPlease select an amount!"
					else:
						set {_a} to arg-2 parsed as an integer
						if {_a} is not an integer:
							send "&cInvalid integer!"
						else:
							if {_a} is less than 50:
								send "&cPlease select a value over 50!"
							else:
								set {_rand} to random integer between 1 and 10
								if {_rand} is {_o}:
									send "&6&LOdds &7| The number was &6%{_rand}%&7! (+$%({_a} * 4)%&7)"
									add ({_a} * 4) to {points::%uuid of player%}
								else:
									send "&6&lOdds &7| The number was &6%{_rand}%&7! (-$%{_a}%&7)"
									remove {_a} from {points::%uuid of player%}
function coinflip(p: player, s: integer, side: text): #s = stakes side = heads or tails
	set {_u} to uuid of {_p}
	wait 5 ticks
	send "&6&lSLOGIC&7 | Ready to take a chance?" to {_p}
	wait 3 seconds
	chance of 50%:
		set {_decider} to "heads"
	else:
		set {_decider} to "tails"
	if {_decider} is {_side}:
		send "&6&lSLOGIC&7 | It was &6%{_decider}%&7! (+$%{_s}%&7)" to {_p}
		add {_s} to {points::%{_u}%}
	else:
		send "&6&lSLOGIC&7 | It was &6%{_decider}%&7! (-$%{_s}%&7)" to {_p}
		remove {_s} from {points::%{_u}%}
