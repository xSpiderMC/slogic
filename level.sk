options:
    name: &6&lSLOGIC &7|
    nopoints: &6&lSLOGIC &7| &cYou don't have enough points to purchase this!
    maxperk: &6&lSLOGIC &7| &cYou have already maxed out this perk


command /level [<text>] [<offline player>] [<integer>]:
    description: Allows you to view your level and admins to modify
    permission: points.admin 
    trigger:
        if arg-1 is not set:
            send "{@name} &7Your level: &6%{level::%uuid of player%}%" to player
        else if player has permission "points.admin":
            if arg-2 is not set:
                send "{@name} &cYou need to specify a player" to player
            else if arg-1 is "reset":
                send "{@name} &7Resetting &6%arg-2%&7's level" to player
                set {level::%uuid of arg-2%} to 0
            else if arg-1 is "show" or "amount":
                send "{@name} &6%arg-2% &7is level &6%{level::%uuid of arg-2%}%" to player
            else if arg-3 is not set:
                send "{@name} &cYou need to specify a level" to player
            else:
                if arg-1 is "give" or "add":
                    send "{@name} &7Adding &6%arg-3% &7level(s) to &6%arg-2%" to player
                    add arg-3 to {level::%uuid of arg-2%}
                    send "{@name} &7You have been given &6%arg-3% &7levels(s)." to arg-2
                else if arg-1 is "remove":
                    send "{@name} &7Removing &6%arg-3% &7level(s) from &6%arg-2%" to player
                    remove arg-3 from {level::%uuid of arg-2%}
                else if arg-1 is "set":
                    send "{@name} &7Set &6%arg-2%&7 level to &6%arg-3%" to player
                    set {level::%uuid of arg-2%} to arg-3
        refreshScoreboard(arg-2)

command /axp [<offline player>] [<number>]:
    permission: points.admin
    trigger:
        if arg-1 is not set:
            send "{@name} &cYou need to provide a player" to player
        else if arg-2 is not set:
            send "{@name} &cYou need to provide an amount" to player
        else:
            addXP(arg-1, arg-2)
    

command /lxp:
    trigger:
        send "{@name} &7You currently have &6%{xp::%uuid of player%}% &7xp %nl%{@name} &7You are currently level &6%{level::%uuid of player%}%"

#XP FUNCTIONS
function addXP(p: player, n: number):
    set {_up} to uuid of {_p}
    if {perks::%{_up}%::student} >= 1:
        set {_sadd} to 0.2 * {perks::%{_up}%::student}
        add {_n} + {_sadd} to {xp::%{_up}%}
        send action bar "&7Gained &6%{_n} + {_sadd}% &7xp" to {_p}
    else:
        add {_n} to {xp::%{_up}%}
        send action bar "&7Gained &6%{_n}% &7xp" to {_p}
    if {xp::%{_up}%} >= 50:
        if {level::%{_up}%} < 100:
            set {xp::%{_up}%} to 0
            add 1 to {level::%{_up}%}
            refreshScoreboard({_p})
            play sound "ENTITY_PLAYER_LEVELUP" to {_p}
            send "&e&lLEVELUP &7| You're now level &6%{level::%{_up}%}%" to {_p}
        set {Achievements::levelup::%{_up}%} to 0 if {Achievements::levelup::%{_up}%} is not set
        send "&a&kK&r&a>>   &aAchievement Unlocked: &6Levelup!   &a<<&kK&r" to {_p} if {Achievements::levelup::%{_up}%} is not set

function genXP(type: text) :: number:
    if {_type} is "ore":
        set {_ran} to random number from 0.4 to 0.6
        return {_ran}
    else if {_type} is "gblock":
        set {_ran} to random number from 0.6 to 0.9
        return {_ran}
    else if {_type} is "hill":
        return 0.3
    else if {_type} is "kill":
        return random number between 0.9 and 1.2
    else if {_type} is "bplace":
        return random integer between 6 and 8
    else if {_type} is "bclaim":
        return random integer between 4 and 6


#PERKS

on load:
    set {allperks::*} to "xp", and "regen"

    set {perk::10} to experience bottle lored "&7Increase the amount of XP gain||&7(&6+0.2 &7for each level)"
    set {perkname::10} to "Student"

    set {perk::11} to apple lored "&7Gain Regeneration II for 3 seconds on kill"
    set {perkname::11} to "Angel"

    set {perkprice::xp::*} to 2000, 3500, 5000, 6500, 8000, 9500, 11000, 12500, 14000, 15500, 17000, 18500, 20000, 21500, and 23000
    
    set {perkprice::regen::*} to 2500

command /perks:
    aliases: perk
    trigger:
        if {level::%uuid of player%} < 10:
            send "{@name} &cYou have to be atleast level 10 to unlock perks"
        open virtual chest inventory named "&6&lPERKS" with size 3 to player
        format gui slot (all integers between 0 and 26) of player with air
        format gui slot 11 of player with skull of player named "&6My Perks" with lore "&7Click to view your perks" to do nothing
        format gui slot 13 of player with totem of undying named "&6Perk Shop" with lore "&7Click to open" to run function perk_gui(player)
        if {prestige::%uuid of player%} > 1:
            format gui slot 15 of player with nether star named "&6Prestige Perk Shop" with lore "&7Click to open"
        else:
            format gui slot 15 of player with end crystal named "&6Prestige Perk Shop" with lore "&cLocked until prestige 1" to run:
                send "{@name} &cYou must prestige to unlock this shop"

command /myperks:
    trigger:
        myPerks(player)

#MENU FUNCTIONS

function perk_gui(p: player):
    set {_up} to uuid of {_p}
    # open virtual chest inventory with size 4 to {_p}
    loop {allperks::*}:
        add 1 to {_n}
        set {_type} to {allperks::%{_n}%}
        set {_max} to size of {perkprice::%{_type}%::*}
        # loop {perkprice::%{_type}%::*}:
        #     add 1 to {_max}
        if {perks::%{_up}%::%{_type}%} > {_max}:
            set {perks::%{_up}%::%{_type}%} to {_max}
    delete {_n}

    create gui with virtual chest with size 4 named "&9&lPERK SHOP":
        loop {perk::*}:
            add 1 to {_n}

            set {_level} to getPerkLvl({allperks::%{_n}%}, {_up})

            set {_next} to {_level} + 1

            set {_type} to {allperks::%{_n}%}

            delete {_max}
            set {_max} to size of {perkprice::%{_type}%::*}
            # loop {perkprice::%{_type}%::*}:
            #     add 1 to {_max}

            if {_level} < {_max}:
                set {_lore} to "%lore of loop-value%||||&7Current Level: &6%{_level}%||&7Price for next level: &6%{perkprice::%{_type}%::%{_next}%}%"
            else:
                set {_lore} to "%lore of loop-value%||||&7Current level: &6%{_level}%||||&cAlready at maximum level!"
            
            set {_slot} to loop-index

            set {_i} to loop-value
            set {_amount} to 1
            if {_level} > 0:
                set {_amount} to {_level}
            
            if {points::%{_up}%} < {perkprice::%{_type}%::%{_next}%}:
                make gui (loop-index parsed as number) with {_amount} of {_i} named "&6%{perkname::%loop-index%}%" lored "%{_lore}%||||&cYou don't have enough points!":
                    send "{@nopoints}" to {_p}
            else if {_level} >= {_max}:
                make gui (loop-index parsed as number) with {_amount} of {_i} named "&6%{perkname::%loop-index%}%" lored {_lore}:
                    send "{@maxperk}" to {_p}
            else:
                make gui (loop-index parsed as number) with {_amount} of {_i} named "&6%{perkname::%loop-index%}%" lored {_lore}:
                    upgradePerk({perkname::%{_slot}%}, {_type}, {_p})
                    perk_gui({_p})
    open last gui to {_p}

            
    set {_perklvl} to {perks::%{_u}%::student} + 1
    set {_scost} to "%{perkprice::student::%{_perklvl}%}%"
    
#PERKS FUNCTIONS

function myPerks(p: player):
    set {_up} to uuid of {_p}
    send {perks::%{_up}%::*} to {_p}

function getPerkLvl(type: text, uuid: text) :: number:
    return {perks::%{_uuid}%::%{_type}%} ? 0

function upgradePerk(name: text, type: text, p: player):
    set {_up} to uuid of {_p}
    set {_next} to getPerkLvl({_type}, {_up}) + 1
    set {_max} to size of {perkprice::%{_type}%::*}
    if {_next} - 1 >= {_max}:
        send "{@maxperk}" to {_p}
    else if {points::%{_up}%} < {perkprice::%{_type}%::%{_next}%}:
        send "{@nopoints}" to {_p}
    else:
        remove {perkprice::%{_type}%::%{_next}%} from {points::%{_up}%}
        refreshScoreboard({_p})
        add 1 to {perks::%{_up}%::%{_type}%}